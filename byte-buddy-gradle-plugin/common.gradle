import java.util.regex.Pattern

compileJava {
    options.warnings = true
    options.deprecation = true
    options.compilerArgs += ["-Xlint:all,-options,-processing"]
}

compileTestJava {
    options.warnings = true
    options.deprecation = true
    options.compilerArgs += ["-Xlint:all,-options,-processing"]
}

// Gradle cannot process all version strings such that JavaVersion.current() fails.
def raw = System.getProperty("java.version")
def current
if (!raw.startsWith("1.") && raw.contains(".")) {
    current = JavaVersion.toVersion(raw.substring(0, raw.indexOf('.')))
} else {
    current = JavaVersion.toVersion(raw)
}

def java19Version
try {
    java19Version = JavaVersion.valueOf("VERSION_19");
} catch (Exception ignored) {
    java19Version = null
}

def sourceVersion = System.getProperty("net.bytebuddy.gradle.version.source")
def source
if (sourceVersion != null) {
    source = JavaVersion.toVersion(sourceVersion)
} else if (java19Version != null && current > java19Version) {
    source = JavaVersion.VERSION_1_8
} else if (current > JavaVersion.VERSION_1_9) {
    source = JavaVersion.VERSION_1_7
} else if (current > JavaVersion.VERSION_1_8) {
    source = JavaVersion.VERSION_1_6
} else {
    source = JavaVersion.VERSION_1_5
}
def targetVersion = System.getProperty("net.bytebuddy.gradle.version.target")
def target
if (targetVersion != null) {
    target = JavaVersion.toVersion(targetVersion)
} else if (java19Version != null && current > java19Version) {
    target = JavaVersion.VERSION_1_8
} else if (current > JavaVersion.VERSION_1_9) {
    target = JavaVersion.VERSION_1_7
} else if (current > JavaVersion.VERSION_1_8) {
    target = JavaVersion.VERSION_1_6
} else {
    target = JavaVersion.VERSION_1_5
}


if (gradle.gradleVersion.startsWith("2.")) { // support legacy version
    sourceCompatibility = source
    targetCompatibility = target
} else {
    java {
        sourceCompatibility = source
        targetCompatibility = target
    }
}

logger.info("Compiling class files from version ${source} to ${target}.")

// Without the extras property, creating a javadoc artifact is not necessary.
if (Boolean.getBoolean('net.bytebuddy.misc.extras')) {
    if (gradle.gradleVersion.startsWith("2.")) { // support legacy version
        task copyJavadoc(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
        javadoc {
            options {
                linksOffline "https://javadoc.io/doc/net.bytebuddy/byte-buddy/${pom.parent.version.text().toString()}", '../byte-buddy/target/apidocs'
            }
        }
    } else {
        task copyJavadoc(type: Jar, dependsOn: javadoc) {
            archiveClassifier.set('javadoc')
            from javadoc.destinationDir
        }
        javadoc {
            options {
                links 'https://docs.oracle.com/javase/1.5.0/docs/api'
                links 'https://docs.gradle.org/7.5/javadoc'
                linksOffline "https://javadoc.io/doc/net.bytebuddy/byte-buddy/${pom.parent.version.text().toString()}", '../byte-buddy/target/apidocs'
            }
        }
    }
} else {
    javadoc {
        enabled = false
    }
    task copyJavadoc {
        logger.debug('javadoc jar is only generated if net.bytebuddy.misc.extras is set to true')
    }
    if (!gradle.gradleVersion.startsWith("2.")) { // support legacy version
        gradle.taskGraph.whenReady {
            tasks.getByPath('javadocJar').enabled = false
            tasks.getByPath('sourcesJar').enabled = false
        }
    }
}

test {
    enabled = !Boolean.getBoolean('net.bytebuddy.test.disabled')
    systemProperty('net.bytebuddy.test.version', version)
    systemProperty('net.bytebuddy.test.integration', Boolean.getBoolean('net.bytebuddy.test.integration'))
}
compileTestJava {
    enabled = !Boolean.getBoolean('net.bytebuddy.test.disabled')
}
processTestResources {
    enabled = !Boolean.getBoolean('net.bytebuddy.test.disabled')
}

task copyLicense(type: Copy) {
    from '..'
    include 'LICENSE', 'NOTICE'
    into "$buildDir/resources/main/META-INF"
    def pattern = Pattern.compile('\\$\\{([a-zA-Z0-9\\-._]+)}')
    filter { String line ->
        def matcher = pattern.matcher(line)
        def buffer = new StringBuffer()
        while (matcher.find()) {
            def property = matcher.group(1)
            String resolved
            if (property.startsWith("project.")) {
                resolved = outerPom.getProperty(property.substring("project.".length()))
            } else {
                resolved = outerPom.properties.getProperty(property)
            }
            if (resolved == null) {
                throw new GradleException("Could not resolve property $property")
            }
            logger.debug("Resolved $property to $resolved")
            matcher.appendReplacement(buffer, resolved)
        }
        matcher.appendTail(buffer).toString()
    }
}

compileJava.dependsOn copyLicense
compileTestJava.dependsOn copyLicense